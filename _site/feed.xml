<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-09-30T06:35:48+01:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Ovidiu Pârvu | Technical blog</title><subtitle>Ovidiu Pârvu&apos;s technical blog</subtitle><author><name>Ovidiu Pârvu</name></author><entry><title type="html">Running pytest tests in parallel</title><link href="http://localhost:4000/2025/09/30/running-pytest-tests-in-parallel" rel="alternate" type="text/html" title="Running pytest tests in parallel" /><published>2025-09-30T00:00:00+01:00</published><updated>2025-09-30T00:00:00+01:00</updated><id>http://localhost:4000/2025/09/30/running-pytest-tests-in-parallel</id><content type="html" xml:base="http://localhost:4000/2025/09/30/running-pytest-tests-in-parallel"><![CDATA[<p>To run pytest tests in parallel use the <a href="https://pypi.org/project/pytest-xdist/">pytest-xdist</a> plugin.</p>]]></content><author><name>Ovidiu Pârvu</name></author><category term="pytest" /><category term="parallel" /><category term="test" /><summary type="html"><![CDATA[To run pytest tests in parallel use the pytest-xdist plugin.]]></summary></entry><entry><title type="html">Detecting point outliers in univariate time series data</title><link href="http://localhost:4000/2025/09/24/detecting-point-outliers-in-univariate-time-series-data" rel="alternate" type="text/html" title="Detecting point outliers in univariate time series data" /><published>2025-09-24T00:00:00+01:00</published><updated>2025-09-24T00:00:00+01:00</updated><id>http://localhost:4000/2025/09/24/detecting-point-outliers-in-univariate-time-series-data</id><content type="html" xml:base="http://localhost:4000/2025/09/24/detecting-point-outliers-in-univariate-time-series-data"><![CDATA[<p>Let us denote the univariate time series data as $X = [x_0, x_1, …, x_n]$.</p>

<h2 id="approaches-using-thresholds">Approaches using thresholds</h2>

<h3 id="z-score">Z-score</h3>

\[outlier(x_i) = |x_i - \mu| &gt; k\sigma\]

<p>where $\mu$ represents the mean, $\sigma$ the standard deviation, and the constant $k$ = 2 or 3 typically.</p>

<h3 id="modified-z-score-using-median-absolute-deviation-mad">Modified z-score using median absolute deviation (MAD)</h3>

\[outlier(x_i) = \left| 0.6745 * \frac{x_i - median(X)}{MAD(X)} \right| &gt; 3.5 \\
MAD(X) = median(|x_i - median(X)|)\]

<h3 id="interquartile-range-iqr">Interquartile range (IQR)</h3>

\[outlier(x_i) = x_i \notin [quartile_1(X) - k * IQR(X), quartile_3(X) + k  * IQR(X)] \\
IQR(X) = quartile_3(X) - quartile_1(X)\]

<p>where the constant $k$ = 1.5 typically.</p>

<h3 id="interpercentile-range-ipr">Interpercentile range* (IPR*)</h3>

\[outlier(x_i, n, t) = \begin{cases}
    false \text{, if } len(X) &lt; n \\ 
    x_i \notin [ \\
        \text{  }min(-t, percentile(5, X) - k * IPR(X)), \\
        \text{  }max(t, percentile(95, X) + k  * IPR(X)) \\
    ] \text{, otherwise.}
\end{cases} \\
IPR(X) = percentile(95, X) - percentile(5, X)\]

<p>where the constant $k$ = 1.5 typically.</p>

<h2 id="further-reading">Further reading</h2>

<p>For a comprehensive review on point outlier detection in univariate time series data see <a href="https://dl.acm.org/doi/10.1145/3444690">this</a> paper.</p>]]></content><author><name>Ovidiu Pârvu</name></author><category term="point" /><category term="outlier" /><category term="time series" /><category term="univariate" /><summary type="html"><![CDATA[Let us denote the univariate time series data as $X = [x_0, x_1, …, x_n]$.]]></summary></entry><entry><title type="html">Detecting significant changes in time series data</title><link href="http://localhost:4000/2025/09/23/detecting-significant-changes-in-time-series-data" rel="alternate" type="text/html" title="Detecting significant changes in time series data" /><published>2025-09-23T00:00:00+01:00</published><updated>2025-09-23T00:00:00+01:00</updated><id>http://localhost:4000/2025/09/23/detecting-significant-changes-in-time-series-data</id><content type="html" xml:base="http://localhost:4000/2025/09/23/detecting-significant-changes-in-time-series-data"><![CDATA[<p>Significant changes in time series data can be detected using a class of algorithms called <em>change point detection algorithms</em> [<a href="https://arxiv.org/pdf/1801.00718">1</a>], [<a href="https://arxiv.org/pdf/2003.06222">2</a>].</p>

<p>A Python package that implements several change point detection algorithms is <a href="https://centre-borelli.github.io/ruptures-docs/">ruptures</a>.</p>

<h2 id="start-simple">Start simple</h2>

<p>If you want to start with a simple and interpretable algorithm before moving on to more advanced ones, the <em>rolling z-score heuristic</em>, also known as a <a href="https://en.wikipedia.org/wiki/Shewhart_individuals_control_chart">Shewhart individuals control chart</a>, could be a good start.</p>

<p>The rolling z-score heuristic works as follows:</p>

<ol>
  <li>For each observation in the time series compute the mean and standard deviation of the previous N observations, where N is the considered window size.</li>
  <li>If the observation is more than M (typically 3) standard deviations away from the mean, then report the observation as a change point.</li>
</ol>

<p>A Python implementation of the rolling z-score heuristic for detecting spikes and troughs is given below.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">polars</span> <span class="k">as</span> <span class="n">pl</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pl</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">({</span><span class="sh">'</span><span class="s">value</span><span class="sh">'</span><span class="p">:</span> <span class="p">[</span><span class="mf">0.8</span><span class="p">,</span> <span class="mf">0.7</span><span class="p">,</span> <span class="mf">0.9</span><span class="p">,</span> <span class="mf">0.6</span><span class="p">,</span> <span class="mf">0.4</span><span class="p">,</span> <span class="mf">32.2</span><span class="p">,</span> <span class="mf">31.9</span><span class="p">,</span> <span class="mf">32.7</span><span class="p">]})</span>

<span class="c1"># Rolling mean and std
</span><span class="n">window</span> <span class="o">=</span> <span class="mi">4</span>
<span class="n">weights</span> <span class="o">=</span> <span class="p">(</span><span class="n">window</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="p">[</span><span class="mf">0.1</span><span class="p">]</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="nf">with_columns</span><span class="p">([</span>
    <span class="n">pl</span><span class="p">.</span><span class="nf">col</span><span class="p">(</span><span class="sh">'</span><span class="s">value</span><span class="sh">'</span><span class="p">).</span><span class="nf">rolling_mean</span><span class="p">(</span><span class="n">window_size</span><span class="o">=</span><span class="n">window</span><span class="p">,</span> <span class="n">weights</span><span class="o">=</span><span class="n">weights</span><span class="p">).</span><span class="nf">alias</span><span class="p">(</span><span class="sh">"</span><span class="s">mean</span><span class="sh">"</span><span class="p">),</span>
    <span class="n">pl</span><span class="p">.</span><span class="nf">col</span><span class="p">(</span><span class="sh">'</span><span class="s">value</span><span class="sh">'</span><span class="p">).</span><span class="nf">rolling_std</span><span class="p">(</span><span class="n">window_size</span><span class="o">=</span><span class="n">window</span><span class="p">,</span> <span class="n">weights</span><span class="o">=</span><span class="n">weights</span><span class="p">).</span><span class="nf">alias</span><span class="p">(</span><span class="sh">"</span><span class="s">std</span><span class="sh">"</span><span class="p">)</span>
<span class="p">])</span>

<span class="c1"># Compute z-score: (x - mean) / std
</span><span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="nf">with_columns</span><span class="p">(</span>
    <span class="p">((</span><span class="n">pl</span><span class="p">.</span><span class="nf">col</span><span class="p">(</span><span class="sh">'</span><span class="s">value</span><span class="sh">'</span><span class="p">)</span> <span class="o">-</span> <span class="n">pl</span><span class="p">.</span><span class="nf">col</span><span class="p">(</span><span class="sh">'</span><span class="s">mean</span><span class="sh">'</span><span class="p">))</span> <span class="o">/</span> <span class="n">pl</span><span class="p">.</span><span class="nf">col</span><span class="p">(</span><span class="sh">'</span><span class="s">std</span><span class="sh">'</span><span class="p">)).</span><span class="nf">alias</span><span class="p">(</span><span class="sh">"</span><span class="s">zscore</span><span class="sh">"</span><span class="p">)</span>
<span class="p">)</span>

<span class="c1"># Filter only spikes or troughs
</span><span class="n">z_thresh</span> <span class="o">=</span> <span class="mi">3</span>
<span class="nf">print</span><span class="p">(</span><span class="n">df</span><span class="p">.</span><span class="nf">filter</span><span class="p">(</span><span class="n">pl</span><span class="p">.</span><span class="nf">col</span><span class="p">(</span><span class="sh">'</span><span class="s">zscore</span><span class="sh">'</span><span class="p">).</span><span class="nf">abs</span><span class="p">()</span> <span class="o">&gt;</span> <span class="n">z_thresh</span><span class="p">))</span>
</code></pre></div></div>

<h2 id="become-more-sophisticated">Become more sophisticated</h2>

<p>Even though the <em>rolling z-score heuristic</em> approach can be good enough for some basic use cases, it is likely to not be for more advanced use cases. For such use cases, consider using one of the approaches supported in <code class="language-plaintext highlighter-rouge">ruptures</code>.</p>

<p>If you choose to use <code class="language-plaintext highlighter-rouge">ruptures</code> you will have to configure the following:</p>

<ol>
  <li>Cost function (e.g mean shift or variance shift).</li>
  <li>Search method (e.g. Dynamic programming or heuristic approach).</li>
  <li>Penalty constraint (e.g. expected number of change points * \beta).</li>
</ol>

<p>Charles Truong gave a great talk on change point detection algorithms in <a href="https://kiwi.cmla.ens-cachan.fr/index.php/s/ss3rZwNSKwGtyQW">2024</a>. Go watch it!</p>]]></content><author><name>Ovidiu Pârvu</name></author><category term="change point" /><category term="time series" /><category term="cpd" /><summary type="html"><![CDATA[Significant changes in time series data can be detected using a class of algorithms called change point detection algorithms [1], [2].]]></summary></entry><entry><title type="html">Adding git repo to Material for Mkdocs website</title><link href="http://localhost:4000/2025/09/22/adding-git-repo-to-material-for-mkdocs-website" rel="alternate" type="text/html" title="Adding git repo to Material for Mkdocs website" /><published>2025-09-22T00:00:00+01:00</published><updated>2025-09-22T00:00:00+01:00</updated><id>http://localhost:4000/2025/09/22/adding-git-repo-to-material-for-mkdocs-website</id><content type="html" xml:base="http://localhost:4000/2025/09/22/adding-git-repo-to-material-for-mkdocs-website"><![CDATA[<p>A git repository can be added to a Material for Mkdocs website as per <a href="https://squidfunk.github.io/mkdocs-material/setup/adding-a-git-repository/?h=repository#adding-a-git-repository">these</a> instructions.</p>]]></content><author><name>Ovidiu Pârvu</name></author><category term="material" /><category term="mkdocs" /><category term="git" /><summary type="html"><![CDATA[A git repository can be added to a Material for Mkdocs website as per these instructions.]]></summary></entry><entry><title type="html">Screen recording gif on Linux</title><link href="http://localhost:4000/2025/09/22/screen-recording-gif-on-linux" rel="alternate" type="text/html" title="Screen recording gif on Linux" /><published>2025-09-22T00:00:00+01:00</published><updated>2025-09-22T00:00:00+01:00</updated><id>http://localhost:4000/2025/09/22/screen-recording-gif-on-linux</id><content type="html" xml:base="http://localhost:4000/2025/09/22/screen-recording-gif-on-linux"><![CDATA[<p>To screen record a gif on Linux you can use <a href="https://github.com/SeaDve/Kooha">Kooha</a>, which can be installed as follows:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>flatpak
<span class="nb">sudo </span>flatpak remote-add <span class="nt">--if-not-exists</span> flathub https://flathub.org/repo/flathub.flatpakrepo
flatpak <span class="nb">install </span>flathub io.github.seadve.Kooha
</code></pre></div></div>

<p>To run Kooha from the command line, you can use the following:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>flatpak run io.github.seadve.Kooha
</code></pre></div></div>]]></content><author><name>Ovidiu Pârvu</name></author><category term="gif" /><category term="linux" /><category term="recording" /><summary type="html"><![CDATA[To screen record a gif on Linux you can use Kooha, which can be installed as follows:]]></summary></entry><entry><title type="html">Running Python code with dependencies from the CLI</title><link href="http://localhost:4000/2025/09/16/running-python-code-with-deps-from-cli" rel="alternate" type="text/html" title="Running Python code with dependencies from the CLI" /><published>2025-09-16T00:00:00+01:00</published><updated>2025-09-16T00:00:00+01:00</updated><id>http://localhost:4000/2025/09/16/running-python-code-with-deps-from-cli</id><content type="html" xml:base="http://localhost:4000/2025/09/16/running-python-code-with-deps-from-cli"><![CDATA[<p><code class="language-plaintext highlighter-rouge">uv</code> can be used to run Python code with dependencies from the CLI as shown in the example below.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>uv run <span class="nt">--with</span> polars - <span class="o">&lt;&lt;</span><span class="no">EOF</span><span class="sh">
import datetime as dt
import polars as pl

df = pl.DataFrame(
    {
        "name": ["Alice Archer", "Ben Brown", "Chloe Cooper", "Daniel Donovan"],
        "birthdate": [
            dt.date(1997, 1, 10),
            dt.date(1985, 2, 15),
            dt.date(1983, 3, 22),
            dt.date(1981, 4, 30),
        ],
        "weight": [57.9, 72.5, 53.6, 83.1],  # (kg)
        "height": [1.56, 1.77, 1.65, 1.75],  # (m)
    }
)

print(df)
</span><span class="no">EOF
</span></code></pre></div></div>]]></content><author><name>Ovidiu Pârvu</name></author><category term="python" /><category term="uv" /><category term="cli" /><summary type="html"><![CDATA[uv can be used to run Python code with dependencies from the CLI as shown in the example below.]]></summary></entry><entry><title type="html">Coding use cases for LLMs</title><link href="http://localhost:4000/2025/08/29/coding-use-cases-for-llms" rel="alternate" type="text/html" title="Coding use cases for LLMs" /><published>2025-08-29T00:00:00+01:00</published><updated>2025-08-29T00:00:00+01:00</updated><id>http://localhost:4000/2025/08/29/coding-use-cases-for-llms</id><content type="html" xml:base="http://localhost:4000/2025/08/29/coding-use-cases-for-llms"><![CDATA[<p>Coding use cases for which I have successfully used LLMs in the past include:</p>

<ol>
  <li>Code review of the git diff between a feature branch and the parent branch before raising a PR.</li>
  <li>Reformatting and prettifying (e.g. using emojis) a block of text to be saved in an .md file.</li>
  <li>Translation of English language queries to SQL queries having given the SQL schema and a description thereof as context.</li>
  <li>Creating a coding agent that has access to user-defined functions passed in as tools.</li>
  <li>Interactive chats about how to do XYZ.</li>
  <li>Code completions.</li>
</ol>]]></content><author><name>Ovidiu Pârvu</name></author><category term="coding" /><category term="llm" /><summary type="html"><![CDATA[Coding use cases for which I have successfully used LLMs in the past include:]]></summary></entry><entry><title type="html">(De)serializing pydantic BaseModels list</title><link href="http://localhost:4000/2025/08/13/de-serializing-pydantic-base-models-list" rel="alternate" type="text/html" title="(De)serializing pydantic BaseModels list" /><published>2025-08-13T00:00:00+01:00</published><updated>2025-08-13T00:00:00+01:00</updated><id>http://localhost:4000/2025/08/13/de-serializing-pydantic-base-models-list</id><content type="html" xml:base="http://localhost:4000/2025/08/13/de-serializing-pydantic-base-models-list"><![CDATA[<p>One approach for (de)serializing pydantic BaseModels lists is using <a href="https://docs.pydantic.dev/latest/concepts/type_adapter/">TypeAdapters</a>, an example of which is given below.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">functools</span> <span class="kn">import</span> <span class="n">cache</span>
<span class="kn">from</span> <span class="n">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>

<span class="kn">from</span> <span class="n">pydantic</span> <span class="kn">import</span> <span class="n">BaseModel</span><span class="p">,</span> <span class="n">TypeAdapter</span>


<span class="k">class</span> <span class="nc">Building</span><span class="p">(</span><span class="n">BaseModel</span><span class="p">):</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">city</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">floors</span><span class="p">:</span> <span class="nb">int</span>


<span class="nd">@cache</span>
<span class="k">def</span> <span class="nf">make_building_list_adapter</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">TypeAdapter</span><span class="p">[</span><span class="nb">list</span><span class="p">[</span><span class="n">Building</span><span class="p">]]:</span>
    <span class="k">return</span> <span class="nc">TypeAdapter</span><span class="p">(</span><span class="nb">list</span><span class="p">[</span><span class="n">Building</span><span class="p">])</span>


<span class="k">def</span> <span class="nf">buildings_to_json_file</span><span class="p">(</span><span class="n">buildings</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="n">Building</span><span class="p">],</span> <span class="nb">file</span><span class="p">:</span> <span class="n">Path</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
    <span class="k">with</span> <span class="nb">file</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="sh">"</span><span class="s">wb</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">adapter</span> <span class="o">=</span> <span class="nf">make_building_list_adapter</span><span class="p">()</span>
        <span class="n">json_bytes</span> <span class="o">=</span> <span class="n">adapter</span><span class="p">.</span><span class="nf">dump_json</span><span class="p">(</span><span class="n">buildings</span><span class="p">)</span>
        <span class="n">f</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">json_bytes</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">buildings_from_json_file</span><span class="p">(</span><span class="nb">file</span><span class="p">:</span> <span class="n">Path</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">list</span><span class="p">[</span><span class="n">Building</span><span class="p">]:</span>
    <span class="k">with</span> <span class="nb">file</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="sh">"</span><span class="s">rb</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">adapter</span> <span class="o">=</span> <span class="nf">make_building_list_adapter</span><span class="p">()</span>
        <span class="n">json_bytes</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">adapter</span><span class="p">.</span><span class="nf">validate_json</span><span class="p">(</span><span class="n">json_bytes</span><span class="p">)</span>
</code></pre></div></div>

<p>A test illustrating how to use the above JSON (de)serialization methods is given <a href="https://github.com/ovidiuparvu/pydantic-base-model-list-serialization/blob/main/test_building.py">here</a>.</p>]]></content><author><name>Ovidiu Pârvu</name></author><category term="pydantic" /><category term="serialization" /><category term="json" /><category term="BaseModel" /><summary type="html"><![CDATA[One approach for (de)serializing pydantic BaseModels lists is using TypeAdapters, an example of which is given below.]]></summary></entry><entry><title type="html">Checking if two files are logically equal</title><link href="http://localhost:4000/2025/08/06/checking-if-two-files-are-logically-equal" rel="alternate" type="text/html" title="Checking if two files are logically equal" /><published>2025-08-06T00:00:00+01:00</published><updated>2025-08-06T00:00:00+01:00</updated><id>http://localhost:4000/2025/08/06/checking-if-two-files-are-logically-equal</id><content type="html" xml:base="http://localhost:4000/2025/08/06/checking-if-two-files-are-logically-equal"><![CDATA[<p>For some use cases it is useful to be able to determine if two files are logically equal, namely they have the same extension and contents but their metadata can differ.</p>

<p>One approach for checking if two files are logically equal in Python, with metadata exclusion/ignore support for csv and Parquet files, is given <a href="https://github.com/ovidiuparvu/compare-files-logically">here</a> and shown below.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">filecmp</span>
<span class="kn">from</span> <span class="n">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">TypeAlias</span>

<span class="kn">import</span> <span class="n">polars</span> <span class="k">as</span> <span class="n">pl</span>

<span class="n">FilePath</span><span class="p">:</span> <span class="n">TypeAlias</span> <span class="o">=</span> <span class="nb">str</span> <span class="o">|</span> <span class="n">Path</span>


<span class="k">def</span> <span class="nf">ensure_existing_file_path</span><span class="p">(</span><span class="n">file_path</span><span class="p">:</span> <span class="n">FilePath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Path</span><span class="p">:</span>
    <span class="n">path</span> <span class="o">=</span> <span class="nc">Path</span><span class="p">(</span><span class="n">file_path</span><span class="p">)</span> <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span> <span class="nb">str</span><span class="p">)</span> <span class="k">else</span> <span class="n">file_path</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">()</span> <span class="ow">or</span> <span class="ow">not</span> <span class="n">path</span><span class="p">.</span><span class="nf">is_file</span><span class="p">():</span>
        <span class="k">raise</span> <span class="nc">FileNotFoundError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">path</span><span class="si">}</span><span class="s"> should point to an existing file and it does not.</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">path</span>


<span class="k">def</span> <span class="nf">files_are_logically_equal</span><span class="p">(</span><span class="n">file1</span><span class="p">:</span> <span class="n">FilePath</span><span class="p">,</span> <span class="n">file2</span><span class="p">:</span> <span class="n">FilePath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
    <span class="n">path1</span> <span class="o">=</span> <span class="nf">ensure_existing_file_path</span><span class="p">(</span><span class="n">file1</span><span class="p">)</span>
    <span class="n">path2</span> <span class="o">=</span> <span class="nf">ensure_existing_file_path</span><span class="p">(</span><span class="n">file2</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">path1</span><span class="p">.</span><span class="nf">samefile</span><span class="p">(</span><span class="n">path2</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">True</span>
    
    <span class="k">if</span> <span class="n">path1</span><span class="p">.</span><span class="nf">stat</span><span class="p">().</span><span class="n">st_size</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">path2</span><span class="p">.</span><span class="nf">stat</span><span class="p">().</span><span class="n">st_size</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">True</span>
    
    <span class="n">ext1</span> <span class="o">=</span> <span class="n">path1</span><span class="p">.</span><span class="n">suffix</span><span class="p">.</span><span class="nf">lower</span><span class="p">()</span>
    <span class="n">ext2</span> <span class="o">=</span> <span class="n">path2</span><span class="p">.</span><span class="n">suffix</span><span class="p">.</span><span class="nf">lower</span><span class="p">()</span>
    
    <span class="k">if</span> <span class="n">ext1</span> <span class="o">!=</span> <span class="n">ext2</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">False</span>
    
    <span class="k">match</span> <span class="n">ext1</span><span class="p">:</span>
        <span class="k">case</span> <span class="sh">'</span><span class="s">.csv</span><span class="sh">'</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">pl</span><span class="p">.</span><span class="nf">scan_csv</span><span class="p">(</span><span class="n">path1</span><span class="p">).</span><span class="nf">collect</span><span class="p">(</span><span class="n">engine</span><span class="o">=</span><span class="sh">"</span><span class="s">streaming</span><span class="sh">"</span><span class="p">).</span><span class="nf">equals</span><span class="p">(</span><span class="n">pl</span><span class="p">.</span><span class="nf">scan_csv</span><span class="p">(</span><span class="n">path2</span><span class="p">).</span><span class="nf">collect</span><span class="p">(</span><span class="n">engine</span><span class="o">=</span><span class="sh">"</span><span class="s">streaming</span><span class="sh">"</span><span class="p">))</span>
        <span class="k">case</span> <span class="sh">'</span><span class="s">.parquet</span><span class="sh">'</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">pl</span><span class="p">.</span><span class="nf">scan_parquet</span><span class="p">(</span><span class="n">path1</span><span class="p">).</span><span class="nf">collect</span><span class="p">(</span><span class="n">engine</span><span class="o">=</span><span class="sh">"</span><span class="s">streaming</span><span class="sh">"</span><span class="p">).</span><span class="nf">equals</span><span class="p">(</span><span class="n">pl</span><span class="p">.</span><span class="nf">scan_parquet</span><span class="p">(</span><span class="n">path2</span><span class="p">).</span><span class="nf">collect</span><span class="p">(</span><span class="n">engine</span><span class="o">=</span><span class="sh">"</span><span class="s">streaming</span><span class="sh">"</span><span class="p">))</span>
        <span class="k">case</span><span class="w"> </span><span class="k">_</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">filecmp</span><span class="p">.</span><span class="nf">cmp</span><span class="p">(</span><span class="n">path1</span><span class="p">,</span> <span class="n">path2</span><span class="p">,</span> <span class="n">shallow</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name>Ovidiu Pârvu</name></author><category term="files" /><category term="equal" /><category term="equality" /><summary type="html"><![CDATA[For some use cases it is useful to be able to determine if two files are logically equal, namely they have the same extension and contents but their metadata can differ.]]></summary></entry><entry><title type="html">Numerical error thresholds for floating point numbers</title><link href="http://localhost:4000/2025/07/22/numerical-error-threshold-floating-point-numbers" rel="alternate" type="text/html" title="Numerical error thresholds for floating point numbers" /><published>2025-07-22T00:00:00+01:00</published><updated>2025-07-22T00:00:00+01:00</updated><id>http://localhost:4000/2025/07/22/numerical-error-threshold-floating-point-numbers</id><content type="html" xml:base="http://localhost:4000/2025/07/22/numerical-error-threshold-floating-point-numbers"><![CDATA[<p>According to W. Kahan’s <a href="https://people.eecs.berkeley.edu/~wkahan/ieee754status/IEEE754.PDF">notes</a> on the status of the IEEE Standard 754, the precision of:</p>
<ol>
  <li>A <em>32 bit</em> floating point number (i.e. a Single) is <em>6-9</em> decimal digits;</li>
  <li>A <em>64 bit</em> floating point number (i.e. a Double) is <em>15-17</em> decimal digits.</li>
</ol>

<p>Specifically the precision is expressed as a range rather than a single value because:</p>
<ol>
  <li>If a decimal string with at most 6/15 significant decimal digits is converted to a Single/Double and then converted back to the same number of significant decimal digits, then the final string should match the original.</li>
  <li>If a Single/Double is converted to a decimal string with at least 9/17 decimal digits and then converted back to a Single/Double, then the final number must match the original.</li>
</ol>

<p>Therefore a conservative numerical error threshold could be:</p>
<ol>
  <li><code class="language-plaintext highlighter-rouge">1E-6</code> for a Single;</li>
  <li><code class="language-plaintext highlighter-rouge">1E-15</code> for a Double.</li>
</ol>

<p>Examples of using such error thresholds are given below.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>if (abs(double - value) &lt; 1e-15) {
    // Double is equal to value
}

if (single + 1e+6 &lt; value) {
    // Single is less than value
}
</code></pre></div></div>

<p>Note that the magnitude of numerical errors can increase as a result of arithmetic operations (e.g. multiplication). Therefore, depending on your use case, the results of arithmetic operations may need to be rounded to ensure that numerical errors do not exceed the error threshold given above.</p>]]></content><author><name>Ovidiu Pârvu</name></author><category term="float" /><category term="double" /><category term="ieee754" /><category term="numerical" /><category term="threshold" /><summary type="html"><![CDATA[According to W. Kahan’s notes on the status of the IEEE Standard 754, the precision of: A 32 bit floating point number (i.e. a Single) is 6-9 decimal digits; A 64 bit floating point number (i.e. a Double) is 15-17 decimal digits.]]></summary></entry></feed>